% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulationFunctions.R
\name{power_LR_test}
\alias{power_LR_test}
\title{Calculates raw p-values for the Likelihood Ratio test with optional beta estimation.}
\usage{
power_LR_test(
  n,
  p,
  model,
  lambda,
  B_power,
  n_beta = NULL,
  lambda_beta = NULL,
  estimate_beta = FALSE
)
}
\arguments{
\item{n}{Positive integer, sample size.}

\item{p}{Positive integer, dimension.}

\item{model}{Character specifying one of "linear", "logistic", or "poisson".}

\item{lambda}{Positive numeric, the regular ridge penalty parameter (use Inf for infinite lambda).}

\item{B_power}{Positive integer, the number of simulation iterations (i.e., number of p-values per gamma) to obtain.}

\item{n_beta}{Positive integer, sample size to estimate beta_0 and beta_a.}

\item{lambda_beta}{Positive numeric, regular ridge penalty parameter when estimating beta_0 and beta_a.}

\item{estimate_beta}{Logical, if TRUE beta_0 and beta_a are estimated; if FALSE, true values are used.}
}
\value{
A matrix of raw p-values with \code{B_power} rows and one column per gamma value.
}
\description{
This function simulates the Likelihood Ratio (LR) test over a range of gamma values
(default: 0, 0.1, ..., 0.5) and returns a matrix of raw p-values. For each simulation
iteration, it generates a design matrix X, computes the linear predictor eta, generates
responses Y, and computes the LR test statistic using either a finite or infinite lambda.
The p-value is computed via a chi-squared approximation.
If estimate_beta is TRUE, beta_0 and beta_a are estimated using generate_beta_est()
(with n_beta and lambda_beta); if FALSE, the true beta vectors are used.
}
\examples{
\dontrun{
  # For a logistic model with infinite lambda:
  p_vals <- power_LR_test(n = 50, p = 10, model = "logistic", lambda = Inf, B_power = 100)
  head(p_vals)

  # For a Poisson model with a finite lambda:
  p_vals <- power_LR_test(n = 50, p = 10, model = "poisson", lambda = 1, B_power = 100)
  head(p_vals)
}

}
