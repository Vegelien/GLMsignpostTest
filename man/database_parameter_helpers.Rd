% Generated by hand to match roxygen2 output
\name{get_or_insert_power_param_id}
\alias{get_or_insert_power_param_id}
\alias{get_or_insert_estimation_param_id}
\alias{get_or_insert_estimation_settings_id}
\title{Retrieve or insert simulation parameter identifiers}
\description{
Ensure that parameter configurations exist in the simulation databases and
return their identifiers, inserting records as needed.
}
\usage{
get_or_insert_power_param_id(
  con,
  n,
  p,
  lambda,
  test_type,
  GLM_model,
  model_specification,
  n_beta = NULL,
  lambda_beta = NULL
)

get_or_insert_estimation_param_id(
  con,
  n,
  p,
  lambda,
  GLM_model,
  model_specification,
  n_beta = NULL,
  lambda_beta = NULL
)

get_or_insert_estimation_settings_id(con, lambda_est)
}
\arguments{
  \item{con}{A \code{\linkS4class{DBIConnection}}.}
  \item{n}{Integer sample size.}
  \item{p}{Integer number of predictors.}
  \item{lambda}{Numeric ridge penalty for the simulation.}
  \item{test_type}{Character string identifying the test type. Only required
  for \code{get_or_insert_power_param_id()}.}
  \item{GLM_model}{Character string naming the GLM family.}
  \item{model_specification}{Character string describing whether the working
  model is well specified or misspecified.}
  \item{n_beta}{Optional integer sample size used when estimating working
  coefficients. Use \code{NULL} for oracle coefficients.}
  \item{lambda_beta}{Optional numeric ridge penalty used when estimating
  working coefficients.}
  \item{lambda_est}{Numeric ridge penalty used during the loss calculation.}
}
\value{
The helpers return the integer identifier of the existing or newly inserted
parameter (or estimation setting) configuration.
}
\examples{
\dontrun{
con <- DBI::dbConnect(RSQLite::SQLite(), tempfile(fileext = ".sqlite"))
create_power_database_schema(con)
power_id <- get_or_insert_power_param_id(
  con, n = 10, p = 20, lambda = Inf, test_type = "AS_SW_plugin",
  GLM_model = "logistic", model_specification = "well_specified"
)
settings_id <- get_or_insert_estimation_settings_id(con, lambda_est = 0.5)
DBI::dbDisconnect(con)
}
}
