% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulationFunctions.R
\name{power_ROTATION_signpost_test}
\alias{power_ROTATION_signpost_test}
\title{Calculates power of signpost test with rotation for finite or infinite lambda
with optional beta estimation.}
\usage{
power_ROTATION_signpost_test(
  n,
  p,
  model,
  B_power,
  B_theta_null,
  lambda = Inf,
  gammas = seq(0, 0.5, by = 0.1),
  verbose = FALSE,
  seed = NULL,
  n_cores = 8,
  n_beta = NULL,
  lambda_beta = NULL,
  estimate_beta = FALSE
)
}
\arguments{
\item{n}{Positive integer, sample size.}

\item{p}{Positive integer, dimension.}

\item{model}{Character, specifying one of "linear", "logistic", or "poisson".}

\item{B_power}{Positive integer, the number of p-values per gamma per generated design X.}

\item{B_theta_null}{Positive integer, the size of the null distribution (per test).}

\item{lambda}{Positive numeric, the ridge penalty parameter. Use Inf for infinite lambda.}

\item{gammas}{Optional numeric vector of gamma values. Defaults to seq(0, 0.5, by = 0.1).}

\item{verbose}{Logical, if TRUE displays a progress bar. Default is FALSE.}

\item{seed}{Optional integer. If provided, sets the seed for reproducibility.}

\item{n_cores}{Optional integer, number of cores for parallel programming.}

\item{n_beta}{Positive integer, sample size to estimate beta_0 and beta_a.}

\item{lambda_beta}{Positive numeric, regular ridge penalty parameter when estimating beta_0 and beta_a.}

\item{estimate_beta}{Logical, if TRUE beta_0 and beta_a are estimated; if FALSE, true values are used.}
}
\value{
A matrix of p-values with \code{B_power} rows and length(gammas) columns.
}
\description{
Computes p-values for gamma values (defaulting to seq(0, 0.5, by = 0.1)).
For finite lambda, the test uses theta_hat_lambda; for infinite lambda, theta_inf_hat.
The observed test statistic is computed without rotation while the null distribution
uses a rotated target.
}
\examples{
# Use default gamma sequence with infinite lambda:
power_ROTATION_signpost_test(n = 50, p = 10, model = "logistic",
                             B_power = 5, B_theta_null = 100, lambda = Inf, verbose = TRUE)

# Use custom gamma sequence with a finite lambda:
power_ROTATION_signpost_test(n = 50, p = 10, model = "logistic",
                             B_power = 5, B_theta_null = 100, lambda = 1,
                             gammas = seq(0, 0.3, by = 0.1), seed = 123)

}
